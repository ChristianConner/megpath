DESIGN FILE: --Created By: Dakota Martin 5/30/2018--

Currently the system has these algorithms:
DistNaive
FuncThrow
ParallelPatterns
PatternMatching
Threaded
Hybrid
Standard
ParallelFuncThrow

State:
	-Holds nearly all the global variables
		-two NMFMatricies
			-Patterns
			-Coefficients
		-Error
		-Time
		-Constraints (dont remember how this is held)
		-parameters involving the t value
			-the value that is associated with accepting higher error
			-deals with the anneal step
			-allows for scalability of MAX_RUNS
			-we currently have fixed values
			-0.2, 0.001
			-0.67, 0.1
			-start_error, end_error
			-start_prob, end_prob
	-Can load all this data from a file
		-usually loaded from a test_args file

Analysis:
	-A Template class the holds the start/run/stop setup
	-holds global variables
		-the algorithm variable that is a standin for MonteAnneal/ThreadedMonteAnneal
		-Cached Error
		-a State pointer

MonteAnneal:
	-A Class that handles the steps of matrix factorization
	-Has a function pointer that is called every 'iteration' number of times

ThreadedMonteAnneal:
	-Same as MonteAnneal but now uses Threads
	-number of threads used can be defined at runtime

PhaseThreadedMonteAnneal:
	-has an extra state
	-simultaniusly runs patterns and coefficients

FlipThreadedMonteAnneal:
	-when it turns state off it flips the pattern thread
	-so there are no idle threads

OMPMonteAnneal
	-uses openMP to thread
	-mimics the same system as base threadedMonteAnneal

Distributed:
	-All distributed Classes pull from this
	-Handles the sending and recieving of matricies to the computers
	-Uses the MPI library for distribution

Observer:
	-Holds 4 virtual function templates
	-Two of them are for MonteCarlo / Anneal callbacks
		-used for injecting a specific algorithm into the base monteCarlo/Anneal algorithms
		-deals with the seperating and re-adjusting of data between distributed process
	-The other two are print callbacks
		-Called at the end of MonteCarlo/Anneal
		-used to configure what kind of information you want to print
	-holds an int iterations for how often these functions are called within the monte/anneal loops

ex:(This isnt the entire setup but it shows how things are orginized)

					Observer
					   |
					/      \
				MonteAnneal   Analysis
				    /		  | \
				   /		 /    \
			ThreadedMonteAnneal	/       \ 
					    threaded   Distributed
							   /   \
					       		  /     \
					     ParallelPatterns  FuncThrow
						     |
					      PatternMatching
						     |
						  Hybrid

This makes combining the function of threaded and distributed relativly easily as they have been objectively seprated
all you need to do is replace the distributed's MonteAnneal with the ThreadedMonteAnneal and you have a Hybrid of the two.

we found that to get decent error you set MAX_RUNS to be 10x the data set size
there might be an overflow with the average error if the max_runs and data size get to be too large
